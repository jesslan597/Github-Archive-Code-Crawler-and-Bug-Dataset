#!/bin/bash
# gharchive script

# get gharchive data
# this script iterates through all months/days/hours
# of gharchive data to find known bugs
# the script  gets repos and commits that contain
# the $msg keyword in the commit message and then runs clang sa
# on the buggy version (considered one commit prior to fix)
# keywords in msg are customizable (see TODO below)

# i corresponds to months
# j corresponds to days
# k corresponds to hours
# year: change year in ext
for i in {01..12}
do
  for j in {01..31}
  do
    for k in {0..23}
    do
      #gets json file of year/month/day/hour data
      ext="2017-$i-$j-$k"
      base_url="http://data.gharchive.org/"
      data_url="$base_url$ext.json.gz"
      wget $data_url
      gunzip "$ext.json.gz"

      # query data with python script
      #inputs: filename, search message, search event
      # TODO: change keywords/event here
      # possible keywords to target c/c++ programs w/ minimal noise include:
      # "null deref", "buffer overrun", "integer overflow"
      msg="null deref"
      event="PushEvent"
      lst=$(python ~/json_handler.py "$ext.json" "$msg" "$event")
      echo $lst
      #remove data once parsed for space purposes
      rm -r "$ext.json"

      # run clang on previous commit
      IFS=')(][' read -r -a array <<< "$lst"
      for x in "${array[@]}"
      do
        cd ~
        IFS=" "
        set -- ${x//[,)(\'\[\]]}

        # split results to get repo url, commit hash, repo name, and commit msg
        repo_url=$1
        commit_hash=$2
        repo_name=$3
	commit_msg=${@:4}
	if [[ "$repo_name" != "kernel" ]] ;
	then
	  if git clone $repo_url ;
          then
            # clone succeeds, try checkout/get previous commit
	    cd $repo_name
            # get one commit prior
            git checkout $commit_hash
            hashes=$(git log -n 2 --pretty=format:"%H")
            IFS=$'\n'
            set -- ${hashes}
            new_hash="$2"
            git checkout $new_hash

            #run clang
            ~/configure
            ~/run-clang-sa

            #save info in json format
            # clang results found in $repo_name-clang-sa-out folder in root dir
            printf '{"repo_url":"%s","repo_name":"%s","fixed_hash":"%s","buggy_hash":"%s","commit_msg":"%s"},\n' "$repo_url" "$repo_name" "$commit_hash" "$new_hash" "$commit_msg" >> ~/gharchive-output.txt
	  else
            # catch errors
            echo "$1,$3,$2,ERROR" >> ~/gharchive-output-errors.txt
          fi
	fi
        #remove repo for space purposes
        rm -rf $repo_name
      done
    done
  done
done
